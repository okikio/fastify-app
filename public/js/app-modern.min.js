require("./noConflict");

var _global = _interopRequireDefault(require("core-js/library/fn/global"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

if (_global.default._babelPolyfill && typeof console !== "undefined" && console.warn) {
  console.warn("@babel/polyfill is loaded more than once on this page. This is probably not desirable/intended " + "and may have consequences if different versions of the polyfills are applied sequentially. " + "If you do need to load the polyfill more than once, use @babel/polyfill/noConflict " + "instead to bypass the warning.");
}

_global.default._babelPolyfill = true;

const { assign } = Object;
class El {
    constructor(el) {
        this.el = (el instanceof El) ? el.el : [...document.querySelectorAll(el)];
    }

    each(fn = () => {}) {
        this.el.forEach(fn.bind(this), this);
        return this;
    }

    set(prop, val) {
        return this.each(el => {
            switch (typeof val) {
                case 'object':
                    if (typeof el[prop] != 'object') this.el[prop] = {};
                    assign(el[prop], val);
                    break;
                case 'undefined':
                    el = prop;
                    break;
                default:
                    el[prop] = val;
            }
        });
    }
}

let ele = new El("body");
ele.set("style", { });
fetch("/assets/raw/barba.js")
    .then(console.log);

console.log({
    message: "Hello"
});

//# sourceMappingURL=app-modern.min.js.map
