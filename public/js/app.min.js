!function(t){"function"==typeof define&&define.amd?define("app",t):t()}(function(){"use strict";function l(t){return(l="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t})(t)}function r(t,e){for(var n=0;n<e.length;n++){var r=e[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(t,r.key,r)}}function n(t){return function(t){if(Array.isArray(t)){for(var e=0,n=new Array(t.length);e<t.length;e++)n[e]=t[e];return n}}(t)||function(t){if(Symbol.iterator in Object(t)||"[object Arguments]"===Object.prototype.toString.call(t))return Array.from(t)}(t)||function(){throw new TypeError("Invalid attempt to spread non-iterable instance")}()}var t="undefined"!=typeof globalThis?globalThis:"undefined"!=typeof window?window:"undefined"!=typeof global?global:"undefined"!=typeof self?self:{};function e(t){return t&&t.__esModule&&Object.prototype.hasOwnProperty.call(t,"default")?t.default:t}function o(t,e){return t(e={exports:{}},e.exports),e.exports}function i(t){return t&&t.Math==Math&&t}function g(t){try{return!!t()}catch(t){return!0}}function y(t){return"object"===l(t)?null!==t:"function"==typeof t}var a="object",m=i(("undefined"==typeof globalThis?"undefined":l(globalThis))==a&&globalThis)||i(("undefined"==typeof window?"undefined":l(window))==a&&window)||i(("undefined"==typeof self?"undefined":l(self))==a&&self)||i(l(t)==a&&t)||Function("return this")();ti({target:"Array",stat:!0},{isArray:f});function u(t){return s.call(t).slice(8,-1)}function j(t){return isNaN(t=+t)?0:(0<t?p:h)(t)}function d(t,e){var n=j(t);return n<0?v(n+e,0):b(n,e)}function x(t){return 0<t?w(j(t),9007199254740991):0}function c(t,e){if(!y(t))return t;var n,r;if(e&&"function"==typeof(n=t.toString)&&!y(r=n.call(t)))return r;if("function"==typeof(n=t.valueOf)&&!y(r=n.call(t)))return r;if(!e&&"function"==typeof(n=t.toString)&&!y(r=n.call(t)))return r;throw TypeError("Can't convert object to primitive value")}var s={}.toString,f=Array.isArray||function(t){return"Array"==u(t)},h=Math.ceil,p=Math.floor,v=Math.max,b=Math.min,w=Math.min,E=!g(function(){return 7!=Object.defineProperty({},"a",{get:function(){return 7}}).a});ti({target:"Object",stat:!0,forced:!E,sham:!E},{defineProperty:H.f});function S(t){return I?L.createElement(t):{}}function P(t){if(!y(t))throw TypeError(String(t)+" is not an object");return t}function O(t,e){return{enumerable:!(1&t),configurable:!(2&t),writable:!(4&t),value:e}}function k(t,e,n){var r=c(e);r in t?H.f(t,r,O(0,n)):t[r]=n}function A(t){if(null==t)throw TypeError("Can't call method on "+t);return t}function T(t){return Object(A(t))}function _(t,e){var n;return f(t)&&("function"!=typeof(n=t.constructor)||n!==Array&&!f(n.prototype)?y(n)&&null===(n=n[D])&&(n=void 0):n=void 0),new(void 0===n?Array:n)(0===e?0:e)}function M(t){if(!y(t))return!1;var e=t[F];return void 0!==e?!!e:f(t)}var L=m.document,I=y(L)&&y(L.createElement),R=!E&&!g(function(){return 7!=Object.defineProperty(S("div"),"a",{get:function(){return 7}}).a}),C=Object.defineProperty,H={f:E?C:function(t,e,n){if(P(t),e=c(e,!0),P(n),R)try{return C(t,e,n)}catch(t){}if("get"in n||"set"in n)throw TypeError("Accessors not supported");return"value"in n&&(t[e]=n.value),t}},D=Ro("species"),F=Ro("isConcatSpreadable"),q=9007199254740991,N="Maximum allowed index exceeded",U=!g(function(){var t=[];return t[F]=!1,t.concat()[0]!==t}),z=Ho("concat");ti({target:"Array",proto:!0,forced:!U||!z},{concat:function(t){var e,n,r,o,i,a=T(this),u=_(a,0),c=0;for(e=-1,r=arguments.length;e<r;e++)if(M(i=-1===e?a:arguments[e])){if(o=x(i.length),q<c+o)throw TypeError(N);for(n=0;n<o;n++,c++)n in i&&k(u,c,i[n])}else{if(q<=c)throw TypeError(N);k(u,c++,i)}return u.length=c,u}});function W(t,e){var n=V[B(t)];return n==K||n!=$&&("function"==typeof e?g(e):!!e)}var G=/#|\.prototype\./,B=W.normalize=function(t){return String(t).replace(G,".").toLowerCase()},V=W.data={},$=W.NATIVE="N",K=W.POLYFILL="P",Q=W;ti({target:"Object",stat:!0},{setPrototypeOf:Y});function X(t,e,n){var r,o;return Y&&"function"==typeof(r=e.constructor)&&r!==n&&y(o=r.prototype)&&o!==n.prototype&&Y(t,o),t}var Y=Object.setPrototypeOf||("__proto__"in{}?function(){var n,r=!1,t={};try{(n=Object.getOwnPropertyDescriptor(Object.prototype,"__proto__").set).call(t,[]),r=t instanceof Array}catch(t){}return function(t,e){return P(t),function(t){if(!y(t)&&null!==t)throw TypeError("Can't set "+String(t)+" as a prototype")}(e),r?n.call(t,e):t.__proto__=e,t}}():void 0),J=Vt.f,Z={}.toString,tt="object"==("undefined"==typeof window?"undefined":l(window))&&window&&Object.getOwnPropertyNames?Object.getOwnPropertyNames(window):[],et={f:function(t){return tt&&"[object Window]"==Z.call(t)?function(t){try{return J(t)}catch(t){return tt.slice()}}(t):J(Ko(t))}},nt=et.f,rt=g(function(){return!Object.getOwnPropertyNames(1)});ti({target:"Object",stat:!0,forced:rt},{getOwnPropertyNames:nt});function ot(t){var e;return y(t)&&(void 0!==(e=t[it])?!!e:"RegExp"==u(t))}var it=Ro("match"),at=Ro("match");ti({target:"String",proto:!0,forced:!function(e){var n=/./;try{"/./"[e](n)}catch(t){try{return n[at]=!1,"/./"[e](n)}catch(t){}}return!1}("includes")},{includes:function(t,e){return!!~String(A(this)).indexOf(function(t){if(ot(t))throw TypeError("The method doesn't accept regular expressions");return t}(t),1<arguments.length?e:void 0)}}),ti({target:"Object",stat:!0,sham:!E},{create:At}),ti({target:"Object",stat:!0,forced:!E,sham:!E},{defineProperties:gt});var ut=g(function(){vt(1)});ti({target:"Object",stat:!0,forced:ut},{keys:function(t){return vt(T(t))}});function ct(t){return"function"==typeof t?t:void 0}function st(t,e){return arguments.length<2?ct(mt[t])||ct(m[t]):mt[t]&&mt[t][e]||m[t]&&m[t][e]}function lt(e,n){try{wt(m,e,n)}catch(t){m[e]=n}return n}function ft(t){return"Symbol("+String(void 0===t?"":t)+")_"+(++St+Ot).toString(36)}function dt(t){return jt[t]||(jt[t]=ft(t))}function ht(){}var pt=["constructor","hasOwnProperty","isPrototypeOf","propertyIsEnumerable","toLocaleString","toString","valueOf"],vt=Object.keys||function(t){return Gt(t,pt)},gt=E?Object.defineProperties:function(t,e){P(t);for(var n,r=vt(e),o=r.length,i=0;i<o;)H.f(t,n=r[i++],e[n]);return t},yt={},mt=m,bt=st("document","documentElement"),wt=E?function(t,e,n){return H.f(t,e,O(1,n))}:function(t,e,n){return t[e]=n,t},Et=o(function(t){var e="__core-js_shared__",n=m[e]||lt(e,{});(t.exports=function(t,e){return n[t]||(n[t]=void 0!==e?e:{})})("versions",[]).push({version:"3.2.1",mode:"global",copyright:"Â© 2019 Denis Pushkarev (zloirock.ru)"})}),St=0,Ot=Math.random(),jt=Et("keys"),xt=dt("IE_PROTO"),Pt="prototype",kt=function(){var t,e=S("iframe"),n=pt.length,r="script";for(e.style.display="none",bt.appendChild(e),e.src=String("javascript:"),(t=e.contentWindow.document).open(),t.write("<script>document.F=Object</"+r+">"),t.close(),kt=t.F;n--;)delete kt[Pt][pt[n]];return kt()},At=Object.create||function(t,e){var n;return null!==t?(ht[Pt]=P(t),n=new ht,ht[Pt]=null,n[xt]=t):n=kt(),void 0===e?n:gt(n,e)};yt[xt]=!0;var Tt=Ro("unscopables"),_t=Array.prototype;null==_t[Tt]&&wt(_t,Tt,At(null));function Mt(t){_t[Tt][t]=!0}var Lt=Ct.includes;ti({target:"Array",proto:!0},{includes:function(t,e){return Lt(this,t,1<arguments.length?e:void 0)}}),Mt("includes");function It(u){return function(t,e,n){var r,o=Ko(t),i=x(o.length),a=d(n,i);if(u&&e!=e){for(;a<i;)if((r=o[a++])!=r)return!0}else for(;a<i;a++)if((u||a in o)&&o[a]===e)return u||a||0;return!u&&-1}}function Rt(t,e){var n=[][t];return!n||!g(function(){n.call(null,e||function(){throw 1},1)})}var Ct={includes:It(!0),indexOf:It(!1)},Ht=Ct.indexOf,Dt=[].indexOf,Ft=!!Dt&&1/[1].indexOf(1,-0)<0,qt=Rt("indexOf");ti({target:"Array",proto:!0,forced:Ft||qt},{indexOf:function(t,e){return Ft?Dt.apply(this,arguments)||0:Ht(this,t,1<arguments.length?e:void 0)}});function Nt(t,e){return zt.call(t,e)}function Ut(){var t=P(this),e="";return t.global&&(e+="g"),t.ignoreCase&&(e+="i"),t.multiline&&(e+="m"),t.dotAll&&(e+="s"),t.unicode&&(e+="u"),t.sticky&&(e+="y"),e}var zt={}.hasOwnProperty,Wt=Ct.indexOf,Gt=function(t,e){var n,r=Ko(t),o=0,i=[];for(n in r)!Nt(yt,n)&&Nt(r,n)&&i.push(n);for(;e.length>o;)Nt(r,n=e[o++])&&(~Wt(i,n)||i.push(n));return i},Bt=pt.concat("length","prototype"),Vt={f:Object.getOwnPropertyNames||function(t){return Gt(t,Bt)}},$t=[].join,Kt=$o!=Object,Qt=Rt("join",",");ti({target:"Array",proto:!0,forced:Kt||Qt},{join:function(t){return $t.call(Ko(this),void 0===t?",":t)}});var Xt=Et("native-function-to-string",Function.toString),Yt={},Jt={CSSRuleList:0,CSSStyleDeclaration:0,CSSValueList:0,ClientRectList:0,DOMRectList:0,DOMStringList:0,DOMTokenList:1,DataTransferItemList:0,FileList:0,HTMLAllCollection:0,HTMLCollection:0,HTMLFormElement:0,HTMLSelectElement:0,MediaList:0,MimeTypeArray:0,NamedNodeMap:0,NodeList:1,PaintRequestList:0,Plugin:0,PluginArray:0,SVGLengthList:0,SVGNumberList:0,SVGPathSegList:0,SVGPointList:0,SVGStringList:0,SVGTransformList:0,SourceBufferList:0,StyleSheetList:0,TextTrackCueList:0,TextTrackList:0,TouchList:0},Zt=Ro("iterator"),te=Ro("toStringTag"),ee=Le.values;for(var ne in Jt){var re=m[ne],oe=re&&re.prototype;if(oe){if(oe[Zt]!==ee)try{wt(oe,Zt,ee)}catch(t){oe[Zt]=ee}if(oe[te]||wt(oe,te,ne),Jt[ne])for(var ie in Le)if(oe[ie]!==Le[ie])try{wt(oe,ie,Le[ie])}catch(t){oe[ie]=Le[ie]}}}var ae=!g(function(){function t(){}return t.prototype.constructor=null,Object.getPrototypeOf(new t)!==t.prototype}),ue=g(function(){he(1)});ti({target:"Object",stat:!0,forced:ue,sham:!ae},{getPrototypeOf:function(t){return he(T(t))}});var ce,se,le,fe=dt("IE_PROTO"),de=Object.prototype,he=ae?Object.getPrototypeOf:function(t){return t=T(t),Nt(t,fe)?t[fe]:"function"==typeof t.constructor&&t instanceof t.constructor?t.constructor.prototype:t instanceof Object?de:null},pe=Ro("iterator"),ve=!1;[].keys&&("next"in(le=[].keys())?(se=he(he(le)))!==Object.prototype&&(ce=se):ve=!0),null==ce&&(ce={}),Nt(ce,pe)||wt(ce,pe,function(){return this});function ge(t,e,n){t&&!Nt(t=n?t:t.prototype,Se)&&Ee(t,Se,{configurable:!0,value:e})}function ye(){return this}function me(){return this}function be(t,e,n,r,o,i,a){function u(t){if(t===o&&v)return v;if(!xe&&t in h)return h[t];switch(t){case"keys":case ke:case Ae:return function(){return new n(this,t)}}return function(){return new n(this)}}!function(t,e,n){var r=e+" Iterator";t.prototype=At(Oe,{next:O(1,n)}),ge(t,r,!1),Yt[r]=ye}(n,e,r);var c,s,l,f=e+" Iterator",d=!1,h=t.prototype,p=h[Pe]||h["@@iterator"]||o&&h[o],v=!xe&&p||u(o),g="Array"==e&&h.entries||p;if(g&&(c=he(g.call(new t)),je!==Object.prototype&&c.next&&(he(c)!==je&&(Y?Y(c,je):"function"!=typeof c[Pe]&&wt(c,Pe,me)),ge(c,f,!0))),o==ke&&p&&p.name!==ke&&(d=!0,v=function(){return p.call(this)}),h[Pe]!==v&&wt(h,Pe,v),Yt[e]=v,o)if(s={values:u(ke),keys:i?v:u("keys"),entries:u(Ae)},a)for(l in s)!xe&&!d&&l in h||nr(h,l,s[l]);else ti({target:e,proto:!0,forced:xe||d},s);return s}var we={IteratorPrototype:ce,BUGGY_SAFARI_ITERATORS:ve},Ee=H.f,Se=Ro("toStringTag"),Oe=we.IteratorPrototype,je=we.IteratorPrototype,xe=we.BUGGY_SAFARI_ITERATORS,Pe=Ro("iterator"),ke="values",Ae="entries",Te="Array Iterator",_e=er.set,Me=er.getterFor(Te),Le=be(Array,"Array",function(t,e){_e(this,{type:Te,target:Ko(t),index:0,kind:e})},function(){var t=Me(this),e=t.target,n=t.kind,r=t.index++;return!e||r>=e.length?{value:t.target=void 0,done:!0}:"keys"==n?{value:r,done:!1}:"values"==n?{value:e[r],done:!1}:{value:[r,e[r]],done:!1}},"values");Yt.Arguments=Yt.Array,Mt("keys"),Mt("values"),Mt("entries");function Ie(u){return function(t,e){var n,r,o=String(A(t)),i=j(e),a=o.length;return i<0||a<=i?u?"":void 0:(n=o.charCodeAt(i))<55296||56319<n||i+1===a||(r=o.charCodeAt(i+1))<56320||57343<r?u?o.charAt(i):n:u?o.slice(i,i+2):r-56320+(n-55296<<10)+65536}}var Re={codeAt:Ie(!1),charAt:Ie(!0)},Ce=Re.charAt,He="String Iterator",De=er.set,Fe=er.getterFor(He);be(String,"String",function(t){De(this,{type:He,string:String(t),index:0})},function(){var t,e=Fe(this),n=e.string,r=e.index;return r>=n.length?{value:void 0,done:!0}:(t=Ce(n,r),e.index+=t.length,{value:t,done:!1})});var qe=Object.isExtensible,Ne=g(function(){qe(1)});ti({target:"Object",stat:!0,forced:Ne},{isExtensible:function(t){return!!y(t)&&(!qe||qe(t))}});function Ue(t,e,n){for(var r in e)nr(t,r,e[r],n);return t}var ze=Ve.onFreeze,We=Object.preventExtensions,Ge=g(function(){We(1)});ti({target:"Object",stat:!0,forced:Ge,sham:!Be},{preventExtensions:function(t){return We&&y(t)?We(ze(t)):t}});var Be=!g(function(){return Object.isExtensible(Object.preventExtensions({}))}),Ve=o(function(t){function n(t){e(t,r,{value:{objectID:"O"+ ++o,weakData:{}}})}var e=H.f,r=ft("meta"),o=0,i=Object.isExtensible||function(){return!0},a=t.exports={REQUIRED:!1,fastKey:function(t,e){if(!y(t))return"symbol"==l(t)?t:("string"==typeof t?"S":"P")+t;if(!Nt(t,r)){if(!i(t))return"F";if(!e)return"E";n(t)}return t[r].objectID},getWeakData:function(t,e){if(!Nt(t,r)){if(!i(t))return!0;if(!e)return!1;n(t)}return t[r].weakData},onFreeze:function(t){return Be&&a.REQUIRED&&i(t)&&!Nt(t,r)&&n(t),t}};yt[r]=!0});Ve.REQUIRED,Ve.fastKey,Ve.getWeakData,Ve.onFreeze;for(var $e in Jt){var Ke=m[$e],Qe=Ke&&Ke.prototype;if(Qe&&Qe.forEach!==hn)try{wt(Qe,"forEach",hn)}catch(t){Qe.forEach=hn}}var Xe=fn.every;ti({target:"Array",proto:!0,forced:Rt("every")},{every:function(t,e){return Xe(this,t,1<arguments.length?e:void 0)}});var Ye=fn.filter;ti({target:"Array",proto:!0,forced:!Ho("filter")},{filter:function(t,e){return Ye(this,t,1<arguments.length?e:void 0)}});var Je=fn.find,Ze="find",tn=!0;Ze in[]&&Array(1)[Ze](function(){tn=!1}),ti({target:"Array",proto:!0,forced:tn},{find:function(t,e){return Je(this,t,1<arguments.length?e:void 0)}}),Mt(Ze);var en=fn.findIndex,nn="findIndex",rn=!0;nn in[]&&Array(1)[nn](function(){rn=!1}),ti({target:"Array",proto:!0,forced:rn},{findIndex:function(t,e){return en(this,t,1<arguments.length?e:void 0)}}),Mt(nn);var on=fn.map;ti({target:"Array",proto:!0,forced:!Ho("map")},{map:function(t,e){return on(this,t,1<arguments.length?e:void 0)}});var an=fn.some;ti({target:"Array",proto:!0,forced:Rt("some")},{some:function(t,e){return an(this,t,1<arguments.length?e:void 0)}});function un(t){if("function"!=typeof t)throw TypeError(String(t)+" is not a function");return t}function cn(r,o,t){if(un(r),void 0===o)return r;switch(t){case 0:return function(){return r.call(o)};case 1:return function(t){return r.call(o,t)};case 2:return function(t,e){return r.call(o,t,e)};case 3:return function(t,e,n){return r.call(o,t,e,n)}}return function(){return r.apply(o,arguments)}}function sn(h){var p=1==h,v=2==h,g=3==h,y=4==h,m=6==h,b=5==h||m;return function(t,e,n,r){for(var o,i,a=T(t),u=$o(a),c=cn(e,n,3),s=x(u.length),l=0,f=r||_,d=p?f(t,s):v?f(t,0):void 0;l<s;l++)if((b||l in u)&&(i=c(o=u[l],l,a),h))if(p)d[l]=i;else if(i)switch(h){case 3:return!0;case 5:return o;case 6:return l;case 2:ln.call(d,o)}else if(y)return!1;return m?-1:g||y?y:d}}var ln=[].push,fn={forEach:sn(0),map:sn(1),filter:sn(2),some:sn(3),every:sn(4),find:sn(5),findIndex:sn(6)},dn=fn.forEach,hn=Rt("forEach")?function(t,e){return dn(this,t,1<arguments.length?e:void 0)}:[].forEach;ti({target:"Array",proto:!0,forced:[].forEach!=hn},{forEach:hn});function pn(t){return void 0!==t&&(Yt.Array===t||wn[bn]===t)}function vn(t){var e,n,r;return void 0===t?"Undefined":null===t?"Null":"string"==typeof(n=function(t,e){try{return t[e]}catch(t){}}(e=Object(t),En))?n:Sn?u(e):"Object"==(r=u(e))&&"function"==typeof e.callee?"Arguments":r}function gn(t){if(null!=t)return t[On]||t["@@iterator"]||Yt[vn(t)]}function yn(e,t,n,r){try{return r?t(P(n)[0],n[1]):t(n)}catch(t){var o=e.return;throw void 0!==o&&P(o.call(e)),t}}function mn(t,e,n){if(!(t instanceof e))throw TypeError("Incorrect "+(n?n+" ":"")+"invocation");return t}var bn=Ro("iterator"),wn=Array.prototype,En=Ro("toStringTag"),Sn="Arguments"==u(function(){return arguments}()),On=Ro("iterator"),jn=o(function(t){function d(t,e){this.stopped=t,this.result=e}(t.exports=function(t,e,n,r,o){var i,a,u,c,s,l,f=cn(e,n,r?2:1);if(o)i=t;else{if("function"!=typeof(a=gn(t)))throw TypeError("Target is not iterable");if(pn(a)){for(u=0,c=x(t.length);u<c;u++)if((s=r?f(P(l=t[u])[0],l[1]):f(t[u]))&&s instanceof d)return s;return new d(!1)}i=a.call(t)}for(;!(l=i.next()).done;)if((s=yn(i,f,l.value,r))&&s instanceof d)return s;return new d(!1)}).stop=function(t){return new d(!0,t)}}),xn=!_n(function(t){Array.from(t)});ti({target:"Array",stat:!0,forced:xn},{from:function(t,e,n){var r,o,i,a,u=T(t),c="function"==typeof this?this:Array,s=arguments.length,l=1<s?e:void 0,f=void 0!==l,d=0,h=gn(u);if(f&&(l=cn(l,2<s?n:void 0,2)),null==h||c==Array&&pn(h))for(o=new c(r=x(u.length));d<r;d++)k(o,d,f?l(u[d],d):u[d]);else for(a=h.call(u),o=new c;!(i=a.next()).done;d++)k(o,d,f?yn(a,l,[i.value,d],!0):i.value);return o.length=d,o}});var Pn=Ro("iterator"),kn=!1;try{var An=0,Tn={next:function(){return{done:!!An++}},return:function(){kn=!0}};Tn[Pn]=function(){return this},Array.from(Tn,function(){throw 2})}catch(t){}var _n=function(t,e){if(!e&&!kn)return!1;var n=!1;try{var r={};r[Pn]=function(){return{next:function(){return{done:n=!0}}}},t(r)}catch(t){}return n},Mn=Math.max,Ln=Math.min;ti({target:"Array",proto:!0,forced:!Ho("splice")},{splice:function(t,e){var n,r,o,i,a,u,c=T(this),s=x(c.length),l=d(t,s),f=arguments.length;if(0===f?n=r=0:r=1===f?(n=0,s-l):(n=f-2,Ln(Mn(j(e),0),s-l)),9007199254740991<s+n-r)throw TypeError("Maximum allowed length exceeded");for(o=_(c,r),i=0;i<r;i++)(a=l+i)in c&&k(o,i,c[a]);if(n<(o.length=r)){for(i=l;i<s-r;i++)u=i+n,(a=i+r)in c?c[u]=c[a]:delete c[u];for(i=s;s-r+n<i;i--)delete c[i-1]}else if(r<n)for(i=s-r;l<i;i--)u=i+n-1,(a=i+r-1)in c?c[u]=c[a]:delete c[u];for(i=0;i<n;i++)c[i+l]=arguments[i+2];return c.length=s-r+n,o}});function In(t){return t.frozen||(t.frozen=new Un)}function Rn(t,e){return Fn(t.entries,function(t){return t[0]===e})}var Cn=Ve.getWeakData,Hn=er.set,Dn=er.getterFor,Fn=fn.find,qn=fn.findIndex,Nn=0,Un=function(){this.entries=[]};Un.prototype={get:function(t){var e=Rn(this,t);if(e)return e[1]},has:function(t){return!!Rn(this,t)},set:function(t,e){var n=Rn(this,t);n?n[1]=e:this.entries.push([t,e])},delete:function(e){var t=qn(this.entries,function(t){return t[0]===e});return~t&&this.entries.splice(t,1),!!~t}};var zn,Wn,Gn,Bn={getConstructor:function(t,n,r,o){function i(t,e,n){var r=u(t),o=Cn(P(e),!0);return!0===o?In(r).set(e,n):o[r.id]=n,t}var a=t(function(t,e){mn(t,a,n),Hn(t,{type:n,id:Nn++,frozen:void 0}),null!=e&&jn(e,t[o],t,r)}),u=Dn(n);return Ue(a.prototype,{delete:function(t){var e=u(this);if(!y(t))return!1;var n=Cn(t);return!0===n?In(e).delete(t):n&&Nt(n,e.id)&&delete n[e.id]},has:function(t){var e=u(this);if(!y(t))return!1;var n=Cn(t);return!0===n?In(e).has(t):n&&Nt(n,e.id)}}),Ue(a.prototype,r?{get:function(t){var e=u(this);if(y(t)){var n=Cn(t);return!0===n?In(e).get(t):n?n[e.id]:void 0}},set:function(t,e){return i(this,t,e)}}:{add:function(t){return i(this,t,!0)}}),a}},Vn=m.WeakMap,$n="function"==typeof Vn&&/native code/.test(Xt.call(Vn)),Kn=(o(function(t){function e(e){return function(t){return e(this,arguments.length?t:void 0)}}var r,o=er.enforce,n=!m.ActiveXObject&&"ActiveXObject"in m,i=Object.isExtensible,a=t.exports=function(r,t,e,o,i){function n(t){var n=u[t];nr(u,t,"add"==t?function(t){return n.call(this,0===t?0:t),this}:"delete"==t?function(t){return!(i&&!y(t))&&n.call(this,0===t?0:t)}:"get"==t?function(t){return i&&!y(t)?void 0:n.call(this,0===t?0:t)}:"has"==t?function(t){return!(i&&!y(t))&&n.call(this,0===t?0:t)}:function(t,e){return n.call(this,0===t?0:t,e),this})}var a=m[r],u=a&&a.prototype,c=a,s=o?"set":"add",l={};if(Q(r,"function"!=typeof a||!(i||u.forEach&&!g(function(){(new a).entries().next()}))))c=e.getConstructor(t,r,o,s),Ve.REQUIRED=!0;else if(Q(r,!0)){var f=new c,d=f[s](i?{}:-0,1)!=f,h=g(function(){f.has(1)}),p=_n(function(t){new a(t)}),v=!i&&g(function(){for(var t=new a,e=5;e--;)t[s](e,e);return!t.has(-0)});p||(((c=t(function(t,e){mn(t,c,r);var n=X(new a,t,c);return null!=e&&jn(e,n[s],n,o),n})).prototype=u).constructor=c),(h||v)&&(n("delete"),n("has"),o&&n("get")),(v||d)&&n(s),i&&u.clear&&delete u.clear}return l[r]=c,ti({global:!0,forced:c!=a},l),ge(c,r),i||e.setStrong(c,r,o),c}("WeakMap",e,Bn,!0,!0);if($n&&n){r=Bn.getConstructor(e,"WeakMap",!0),Ve.REQUIRED=!0;var u=a.prototype,c=u.delete,s=u.has,l=u.get,f=u.set;Ue(u,{delete:function(t){if(!y(t)||i(t))return c.call(this,t);var e=o(this);return e.frozen||(e.frozen=new r),c.call(this,t)||e.frozen.delete(t)},has:function(t){if(!y(t)||i(t))return s.call(this,t);var e=o(this);return e.frozen||(e.frozen=new r),s.call(this,t)||e.frozen.has(t)},get:function(t){if(!y(t)||i(t))return l.call(this,t);var e=o(this);return e.frozen||(e.frozen=new r),s.call(this,t)?l.call(this,t):e.frozen.get(t)},set:function(t,e){if(y(t)&&!i(t)){var n=o(this);n.frozen||(n.frozen=new r),s.call(this,t)?f.call(this,t,e):n.frozen.set(t,e)}else f.call(this,t,e);return this}})}}),m.WeakMap);if($n){var Qn=new Kn,Xn=Qn.get,Yn=Qn.has,Jn=Qn.set;zn=function(t,e){return Jn.call(Qn,t,e),e},Wn=function(t){return Xn.call(Qn,t)||{}},Gn=function(t){return Yn.call(Qn,t)}}else{var Zn=dt("state");yt[Zn]=!0,zn=function(t,e){return wt(t,Zn,e),e},Wn=function(t){return Nt(t,Zn)?t[Zn]:{}},Gn=function(t){return Nt(t,Zn)}}function tr(t){var e=st(t),n=H.f;E&&e&&!e[rr]&&n(e,rr,{configurable:!0,get:function(){return this}})}var er={set:zn,get:Wn,has:Gn,enforce:function(t){return Gn(t)?Wn(t):zn(t,{})},getterFor:function(n){return function(t){var e;if(!y(t)||(e=Wn(t)).type!==n)throw TypeError("Incompatible receiver, "+n+" required");return e}}},nr=o(function(t){var e=er.get,u=er.enforce,c=String(Xt).split("toString");Et("inspectSource",function(t){return Xt.call(t)}),(t.exports=function(t,e,n,r){var o=!!r&&!!r.unsafe,i=!!r&&!!r.enumerable,a=!!r&&!!r.noTargetGet;"function"==typeof n&&("string"!=typeof e||Nt(n,"name")||wt(n,"name",e),u(n).source=c.join("string"==typeof e?e:"")),t!==m?(o?!a&&t[e]&&(i=!0):delete t[e],i?t[e]=n:wt(t,e,n)):i?t[e]=n:lt(e,n)})(Function.prototype,"toString",function(){return"function"==typeof this&&e(this).source||Xt.call(this)})}),rr=Ro("species"),or=H.f,ir=Vt.f,ar=Ro("match"),ur=m.RegExp,cr=ur.prototype,sr=/a/g,lr=/a/g,fr=new ur(sr)!==sr;if(E&&Q("RegExp",!fr||g(function(){return lr[ar]=!1,ur(sr)!=sr||ur(lr)==lr||"/a/i"!=ur(sr,"i")}))){for(var dr=function(t,e){var n=this instanceof dr,r=ot(t),o=void 0===e;return!n&&r&&t.constructor===dr&&o?t:X(fr?new ur(r&&!o?t.source:t,e):ur((r=t instanceof dr)?t.source:t,r&&o?Ut.call(t):e),n?this:cr,dr)},hr=function(e){e in dr||or(dr,e,{configurable:!0,get:function(){return ur[e]},set:function(t){ur[e]=t}})},pr=ir(ur),vr=0;pr.length>vr;)hr(pr[vr++]);(cr.constructor=dr).prototype=cr,nr(m,"RegExp",dr)}tr("RegExp");var gr,yr,mr=RegExp.prototype.exec,br=String.prototype.replace,wr=mr,Er=(gr=/a/,yr=/b*/g,mr.call(gr,"a"),mr.call(yr,"a"),0!==gr.lastIndex||0!==yr.lastIndex),Sr=void 0!==/()??/.exec("")[1];(Er||Sr)&&(wr=function(t){var e,n,r,o,i=this;return Sr&&(n=new RegExp("^"+i.source+"$(?!\\s)",Ut.call(i))),Er&&(e=i.lastIndex),r=mr.call(i,t),Er&&r&&(i.lastIndex=i.global?r.index+r[0].length:e),Sr&&r&&1<r.length&&br.call(r[0],n,function(){for(o=1;o<arguments.length-2;o++)void 0===arguments[o]&&(r[o]=void 0)}),r});function Or(n,t,e,r){var o=Ro(n),i=!g(function(){var t={};return t[o]=function(){return 7},7!=""[n](t)}),a=i&&!g(function(){var t=!1,e=/a/;return e.exec=function(){return t=!0,null},"split"===n&&(e.constructor={},e.constructor[kr]=function(){return e}),e[o](""),!t});if(!i||!a||"replace"===n&&!Ar||"split"===n&&!Tr){var u=/./[o],c=e(o,""[n],function(t,e,n,r,o){return e.exec===Pr?i&&!o?{done:!0,value:u.call(e,n,r)}:{done:!0,value:t.call(n,e,r)}:{done:!1}}),s=c[0],l=c[1];nr(String.prototype,n,s),nr(RegExp.prototype,o,2==t?function(t,e){return l.call(t,this,e)}:function(t){return l.call(t,this)}),r&&wt(RegExp.prototype[o],"sham",!0)}}function jr(t,e,n){return e+(n?_r(t,e).length:1)}function xr(t,e){var n=t.exec;if("function"==typeof n){var r=n.call(t,e);if("object"!==l(r))throw TypeError("RegExp exec method returned something other than an Object or null");return r}if("RegExp"!==u(t))throw TypeError("RegExp#exec called on incompatible receiver");return Pr.call(t,e)}var Pr=wr,kr=Ro("species"),Ar=!g(function(){var t=/./;return t.exec=function(){var t=[];return t.groups={a:"7"},t},"7"!=="".replace(t,"$<a>")}),Tr=!g(function(){var t=/(?:)/,e=t.exec;t.exec=function(){return e.apply(this,arguments)};var n="ab".split(t);return 2!==n.length||"a"!==n[0]||"b"!==n[1]}),_r=Re.charAt,Mr=Math.max,Lr=Math.min,Ir=Math.floor,Rr=/\$([$&'`]|\d\d?|<[^>]*>)/g,Cr=/\$([$&'`]|\d\d?)/g;Or("replace",2,function(o,E,S){return[function(t,e){var n=A(this),r=null==t?void 0:t[o];return void 0!==r?r.call(t,n,e):E.call(String(n),t,e)},function(t,e){var n=S(E,t,this,e);if(n.done)return n.value;var r=P(t),o=String(this),i="function"==typeof e;i||(e=String(e));var a=r.global;if(a){var u=r.unicode;r.lastIndex=0}for(var c=[];;){var s=xr(r,o);if(null===s)break;if(c.push(s),!a)break;""===String(s[0])&&(r.lastIndex=jr(o,x(r.lastIndex),u))}for(var l,f="",d=0,h=0;h<c.length;h++){s=c[h];for(var p=String(s[0]),v=Mr(Lr(j(s.index),o.length),0),g=[],y=1;y<s.length;y++)g.push(void 0===(l=s[y])?l:String(l));var m=s.groups;if(i){var b=[p].concat(g,v,o);void 0!==m&&b.push(m);var w=String(e.apply(void 0,b))}else w=O(p,o,v,g,m,e);d<=v&&(f+=o.slice(d,v)+w,d=v+p.length)}return f+o.slice(d)}];function O(i,a,u,c,s,t){var l=u+i.length,f=c.length,e=Cr;return void 0!==s&&(s=T(s),e=Rr),E.call(t,e,function(t,e){var n;switch(e.charAt(0)){case"$":return"$";case"&":return i;case"`":return a.slice(0,u);case"'":return a.slice(l);case"<":n=s[e.slice(1,-1)];break;default:var r=+e;if(0==r)return t;if(f<r){var o=Ir(r/10);return 0===o?t:o<=f?void 0===c[o-1]?e.charAt(1):c[o-1]+e.charAt(1):t}n=c[r-1]}return void 0===n?"":n})}});function Hr(t,e){for(var n=Fr(e),r=H.f,o=Jo.f,i=0;i<n.length;i++){var a=n[i];Nt(t,a)||r(t,a,o(e,a))}}var Dr={f:Object.getOwnPropertySymbols},Fr=st("Reflect","ownKeys")||function(t){var e=Vt.f(P(t)),n=Dr.f;return n?e.concat(n(t)):e},qr=H.f,Nr=m.Symbol;if(!(!E||"function"!=typeof Nr||"description"in Nr.prototype&&void 0===Nr().description)){var Ur={},zr=function(t){var e=arguments.length<1||void 0===t?void 0:String(t),n=this instanceof zr?new Nr(e):void 0===e?Nr():Nr(e);return""===e&&(Ur[n]=!0),n};Hr(zr,Nr);var Wr=zr.prototype=Nr.prototype;Wr.constructor=zr;var Gr=Wr.toString,Br="Symbol(test)"==String(Nr("test")),Vr=/^Symbol\((.*)\)[^)]+$/;qr(Wr,"description",{configurable:!0,get:function(){var t=y(this)?this.valueOf():this,e=Gr.call(t);if(Nt(Ur,t))return"";var n=Br?e.slice(7,-1):e.replace(Vr,"$1");return""===n?void 0:n}}),ti({global:!0,forced:!0},{Symbol:zr})}function $r(t){var e=mt.Symbol||(mt.Symbol={});Nt(e,t)||ro(e,t,{value:no.f(t)})}function Kr(t,e){var n=wo[t]=At(ho[uo]);return so(n,{type:ao,tag:t,description:e}),E||(n.description=e),n}function Qr(e,t){P(e);var n=Ko(t),r=vt(n).concat(Mo(n));return oo(r,function(t){E&&!_o.call(n,t)||To(e,t,n[t])}),e}function Xr(t,e){var n=Ko(t),r=c(e,!0);if(n!==fo||!Nt(wo,r)||Nt(Eo,r)){var o=go(n,r);return!o||!Nt(wo,r)||Nt(n,io)&&n[io][r]||(o.enumerable=!0),o}}function Yr(t){var e=mo(Ko(t)),n=[];return oo(e,function(t){Nt(wo,t)||Nt(yt,t)||n.push(t)}),n}var Jr=!!Object.getOwnPropertySymbols&&!g(function(){return!String(Symbol())}),Zr={}.propertyIsEnumerable,to=Object.getOwnPropertyDescriptor,eo={f:to&&!Zr.call({1:2},1)?function(t){var e=to(this,t);return!!e&&e.enumerable}:Zr},no={f:Ro},ro=H.f,oo=fn.forEach,io=dt("hidden"),ao="Symbol",uo="prototype",co=Ro("toPrimitive"),so=er.set,lo=er.getterFor(ao),fo=Object[uo],ho=m.Symbol,po=m.JSON,vo=po&&po.stringify,go=Jo.f,yo=H.f,mo=et.f,bo=eo.f,wo=Et("symbols"),Eo=Et("op-symbols"),So=Et("string-to-symbol-registry"),Oo=Et("symbol-to-string-registry"),jo=Et("wks"),xo=m.QObject,Po=!xo||!xo[uo]||!xo[uo].findChild,ko=E&&g(function(){return 7!=At(yo({},"a",{get:function(){return yo(this,"a",{value:7}).a}})).a})?function(t,e,n){var r=go(fo,e);r&&delete fo[e],yo(t,e,n),r&&t!==fo&&yo(fo,e,r)}:yo,Ao=Jr&&"symbol"==l(ho.iterator)?function(t){return"symbol"==l(t)}:function(t){return Object(t)instanceof ho},To=function(t,e,n){t===fo&&To(Eo,e,n),P(t);var r=c(e,!0);return P(n),Nt(wo,r)?(n.enumerable?(Nt(t,io)&&t[io][r]&&(t[io][r]=!1),n=At(n,{enumerable:O(0,!1)})):(Nt(t,io)||yo(t,io,O(1,{})),t[io][r]=!0),ko(t,r,n)):yo(t,r,n)},_o=function(t){var e=c(t,!0),n=bo.call(this,e);return!(this===fo&&Nt(wo,e)&&!Nt(Eo,e))&&(!(n||!Nt(this,e)||!Nt(wo,e)||Nt(this,io)&&this[io][e])||n)},Mo=function(t){var e=t===fo,n=mo(e?Eo:Ko(t)),r=[];return oo(n,function(t){!Nt(wo,t)||e&&!Nt(fo,t)||r.push(wo[t])}),r};Jr||(nr((ho=function(t){if(this instanceof ho)throw TypeError("Symbol is not a constructor");var e=arguments.length&&void 0!==t?String(t):void 0,n=ft(e);return E&&Po&&ko(fo,n,{configurable:!0,set:function t(e){this===fo&&t.call(Eo,e),Nt(this,io)&&Nt(this[io],n)&&(this[io][n]=!1),ko(this,n,O(1,e))}}),Kr(n,e)})[uo],"toString",function(){return lo(this).tag}),eo.f=_o,H.f=To,Jo.f=Xr,Vt.f=et.f=Yr,Dr.f=Mo,E&&(yo(ho[uo],"description",{configurable:!0,get:function(){return lo(this).description}}),nr(fo,"propertyIsEnumerable",_o,{unsafe:!0})),no.f=function(t){return Kr(Ro(t),t)}),ti({global:!0,wrap:!0,forced:!Jr,sham:!Jr},{Symbol:ho}),oo(vt(jo),function(t){$r(t)}),ti({target:ao,stat:!0,forced:!Jr},{for:function(t){var e=String(t);if(Nt(So,e))return So[e];var n=ho(e);return So[e]=n,Oo[n]=e,n},keyFor:function(t){if(!Ao(t))throw TypeError(t+" is not a symbol");if(Nt(Oo,t))return Oo[t]},useSetter:function(){Po=!0},useSimple:function(){Po=!1}}),ti({target:"Object",stat:!0,forced:!Jr,sham:!E},{create:function(t,e){return void 0===e?At(t):Qr(At(t),e)},defineProperty:To,defineProperties:Qr,getOwnPropertyDescriptor:Xr}),ti({target:"Object",stat:!0,forced:!Jr},{getOwnPropertyNames:Yr,getOwnPropertySymbols:Mo}),ti({target:"Object",stat:!0,forced:g(function(){Dr.f(1)})},{getOwnPropertySymbols:function(t){return Dr.f(T(t))}}),po&&ti({target:"JSON",stat:!0,forced:!Jr||g(function(){var t=ho();return"[null]"!=vo([t])||"{}"!=vo({a:t})||"{}"!=vo(Object(t))})},{stringify:function(t){for(var e,n,r=[t],o=1;o<arguments.length;)r.push(arguments[o++]);if(n=e=r[1],(y(e)||void 0!==t)&&!Ao(t))return f(e)||(e=function(t,e){if("function"==typeof n&&(e=n.call(this,t,e)),!Ao(e))return e}),r[1]=e,vo.apply(po,r)}}),ho[uo][co]||wt(ho[uo],co,ho[uo].valueOf),ge(ho,ao),yt[io]=!0;var Lo=m.Symbol,Io=Et("wks"),Ro=function(t){return Io[t]||(Io[t]=Jr&&Lo[t]||(Jr?Lo:ft)("Symbol."+t))},Co=Ro("species"),Ho=function(e){return!g(function(){var t=[];return(t.constructor={})[Co]=function(){return{foo:1}},1!==t[e](Boolean).foo})},Do=Ro("species"),Fo=[].slice,qo=Math.max;ti({target:"Array",proto:!0,forced:!Ho("slice")},{slice:function(t,e){var n,r,o,i=Ko(this),a=x(i.length),u=d(t,a),c=d(void 0===e?a:e,a);if(f(i)&&("function"!=typeof(n=i.constructor)||n!==Array&&!f(n.prototype)?y(n)&&null===(n=n[Do])&&(n=void 0):n=void 0,n===Array||void 0===n))return Fo.call(i,u,c);for(r=new(void 0===n?Array:n)(qo(c-u,0)),o=0;u<c;u++,o++)u in i&&k(r,o,i[u]);return r.length=o,r}});function No(t,e){var n,r=P(t).constructor;return void 0===r||null==(n=P(r)[Uo])?e:un(n)}var Uo=Ro("species"),zo=[].push,Wo=Math.min,Go=4294967295,Bo=!g(function(){return!RegExp(Go,"y")});Or("split",2,function(o,g,y){var m;return m="c"=="abbc".split(/(b)*/)[1]||4!="test".split(/(?:)/,-1).length||2!="ab".split(/(?:ab)*/).length||4!=".".split(/(.?)(.?)/).length||1<".".split(/()()/).length||"".split(/.?/).length?function(t,e){var n=String(A(this)),r=void 0===e?Go:e>>>0;if(0==r)return[];if(void 0===t)return[n];if(!ot(t))return g.call(n,t,r);for(var o,i,a,u=[],c=(t.ignoreCase?"i":"")+(t.multiline?"m":"")+(t.unicode?"u":"")+(t.sticky?"y":""),s=0,l=new RegExp(t.source,c+"g");(o=Pr.call(l,n))&&!(s<(i=l.lastIndex)&&(u.push(n.slice(s,o.index)),1<o.length&&o.index<n.length&&zo.apply(u,o.slice(1)),a=o[0].length,s=i,u.length>=r));)l.lastIndex===o.index&&l.lastIndex++;return s===n.length?!a&&l.test("")||u.push(""):u.push(n.slice(s)),u.length>r?u.slice(0,r):u}:"0".split(void 0,0).length?function(t,e){return void 0===t&&0===e?[]:g.call(this,t,e)}:g,[function(t,e){var n=A(this),r=null==t?void 0:t[o];return void 0!==r?r.call(t,n,e):m.call(String(n),t,e)},function(t,e){var n=y(m,t,this,e,m!==g);if(n.done)return n.value;var r=P(t),o=String(this),i=No(r,RegExp),a=r.unicode,u=(r.ignoreCase?"i":"")+(r.multiline?"m":"")+(r.unicode?"u":"")+(Bo?"y":"g"),c=new i(Bo?r:"^(?:"+r.source+")",u),s=void 0===e?Go:e>>>0;if(0==s)return[];if(0===o.length)return null===xr(c,o)?[o]:[];for(var l=0,f=0,d=[];f<o.length;){c.lastIndex=Bo?f:0;var h,p=xr(c,Bo?o:o.slice(f));if(null===p||(h=Wo(x(c.lastIndex+(Bo?0:f)),o.length))===l)f=jr(o,f,a);else{if(d.push(o.slice(l,f)),d.length===s)return d;for(var v=1;v<=p.length-1;v++)if(d.push(p[v]),d.length===s)return d;f=l=h}}return d.push(o.slice(l)),d}]},!Bo);var Vo="".split,$o=g(function(){return!Object("z").propertyIsEnumerable(0)})?function(t){return"String"==u(t)?Vo.call(t,""):Object(t)}:Object,Ko=function(t){return $o(A(t))},Qo=Jo.f,Xo=g(function(){Qo(1)});ti({target:"Object",stat:!0,forced:!E||Xo,sham:!E},{getOwnPropertyDescriptor:function(t,e){return Qo(Ko(t),e)}});var Yo=Object.getOwnPropertyDescriptor,Jo={f:E?Yo:function(t,e){if(t=Ko(t),e=c(e,!0),R)try{return Yo(t,e)}catch(t){}if(Nt(t,e))return O(!eo.f.call(t,e),t[e])}},Zo=Jo.f,ti=function(t,e){var n,r,o,i,a,u=t.target,c=t.global,s=t.stat;if(n=c?m:s?m[u]||lt(u,{}):(m[u]||{}).prototype)for(r in e){if(i=e[r],o=t.noTargetGet?(a=Zo(n,r))&&a.value:n[r],!Q(c?r:u+(s?".":"#")+r,t.forced)&&void 0!==o){if(l(i)===l(o))continue;Hr(i,o)}(t.sham||o&&o.sham)&&wt(i,"sham",!0),nr(n,r,i,t)}};ti({target:"RegExp",proto:!0,forced:/./.exec!==Pr},{exec:Pr}),Or("match",1,function(r,s,l){return[function(t){var e=A(this),n=null==t?void 0:t[r];return void 0!==n?n.call(t,e):new RegExp(t)[r](String(e))},function(t){var e=l(s,t,this);if(e.done)return e.value;var n=P(t),r=String(this);if(!n.global)return xr(n,r);for(var o,i=n.unicode,a=[],u=n.lastIndex=0;null!==(o=xr(n,r));){var c=String(o[0]);""===(a[u]=c)&&(n.lastIndex=jr(r,x(n.lastIndex),i)),u++}return 0===u?null:a}]});var ei=H.f,ni=Function.prototype,ri=ni.toString,oi=/^\s*function ([^ (]*)/;!E||"name"in ni||ei(ni,"name",{configurable:!0,get:function(){try{return ri.call(this).match(oi)[1]}catch(t){return""}}}),E&&"g"!=/./g.flags&&H.f(RegExp.prototype,"flags",{configurable:!0,get:Ut});var ii="toString",ai=RegExp.prototype,ui=ai[ii],ci=g(function(){return"/a/b"!=ui.call({source:"a",flags:"b"})}),si=ui.name!=ii;(ci||si)&&nr(RegExp.prototype,ii,function(){var t=P(this),e=String(t.source),n=t.flags;return"/"+e+"/"+String(void 0===n&&t instanceof RegExp&&!("flags"in ai)?Ut.call(t):n)},{unsafe:!0});var li=Date.prototype,fi="Invalid Date",di="toString",hi=li[di],pi=li.getTime;new Date(NaN)+""!=fi&&nr(li,di,function(){var t=pi.call(this);return t==t?hi.call(this):fi});var vi={};vi[Ro("toStringTag")]="z";var gi="[object z]"!==String(vi)?function(){return"[object "+vn(this)+"]"}:vi.toString,yi=Object.prototype;gi!==yi.toString&&nr(yi,"toString",gi,{unsafe:!0});function mi(t){var n,r;this.promise=new t(function(t,e){if(void 0!==n||void 0!==r)throw TypeError("Bad Promise constructor");n=t,r=e}),this.resolve=un(n),this.reject=un(r)}function bi(t,e){if(P(t),y(e)&&e.constructor===t)return e;var n=Ei.f(t);return(0,n.resolve)(e),n.promise}var wi=m.Promise,Ei={f:function(t){return new mi(t)}};ti({target:"Promise",proto:!0,real:!0},{finally:function(e){var n=No(this,st("Promise")),t="function"==typeof e;return this.then(t?function(t){return bi(n,e()).then(function(){return t})}:e,t?function(t){return bi(n,e()).then(function(){throw t})}:e)}}),"function"!=typeof wi||wi.prototype.finally||nr(wi.prototype,"finally",st("Promise").prototype.finally);var Si=!m.setImmediate||!m.clearImmediate;ti({global:!0,bind:!0,enumerable:!0,forced:Si},{setImmediate:Yi.set,clearImmediate:Yi.clear});function Oi(o){return function(t,e){var n=2<arguments.length,r=n?xi.call(arguments,2):void 0;return o(n?function(){("function"==typeof t?t:Function(t)).apply(this,r)}:t,e)}}var ji=st("navigator","userAgent")||"",xi=[].slice,Pi=/MSIE .\./.test(ji);ti({global:!0,bind:!0,forced:Pi},{setTimeout:Oi(m.setTimeout),setInterval:Oi(m.setInterval)});function ki(t){if(Ui.hasOwnProperty(t)){var e=Ui[t];delete Ui[t],e()}}function Ai(t){return function(){ki(t)}}function Ti(t){ki(t.data)}function _i(t){m.postMessage(t+"",Ri.protocol+"//"+Ri.host)}var Mi,Li,Ii,Ri=m.location,Ci=m.setImmediate,Hi=m.clearImmediate,Di=m.process,Fi=m.MessageChannel,qi=m.Dispatch,Ni=0,Ui={},zi="onreadystatechange";Ci&&Hi||(Ci=function(t){for(var e=[],n=1;n<arguments.length;)e.push(arguments[n++]);return Ui[++Ni]=function(){("function"==typeof t?t:Function(t)).apply(void 0,e)},Mi(Ni),Ni},Hi=function(t){delete Ui[t]},"process"==u(Di)?Mi=function(t){Di.nextTick(Ai(t))}:qi&&qi.now?Mi=function(t){qi.now(Ai(t))}:Fi?(Ii=(Li=new Fi).port2,Li.port1.onmessage=Ti,Mi=cn(Ii.postMessage,Ii,1)):!m.addEventListener||"function"!=typeof postMessage||m.importScripts||g(_i)?Mi=zi in S("script")?function(t){bt.appendChild(S("script"))[zi]=function(){bt.removeChild(this),ki(t)}}:function(t){setTimeout(Ai(t),0)}:(Mi=_i,m.addEventListener("message",Ti,!1)));var Wi,Gi,Bi,Vi,$i,Ki,Qi,Xi,Yi={set:Ci,clear:Hi},Ji=Jo.f,Zi=Yi.set,ta=m.MutationObserver||m.WebKitMutationObserver,ea=m.process,na=m.Promise,ra="process"==u(ea),oa=Ji(m,"queueMicrotask"),ia=oa&&oa.value;ia||(Wi=function(){var t,e;for(ra&&(t=ea.domain)&&t.exit();Gi;){e=Gi.fn,Gi=Gi.next;try{e()}catch(t){throw Gi?Vi():Bi=void 0,t}}Bi=void 0,t&&t.enter()},Vi=ra?function(){ea.nextTick(Wi)}:ta&&!/(iphone|ipod|ipad).*applewebkit/i.test(ji)?($i=!0,Ki=document.createTextNode(""),new ta(Wi).observe(Ki,{characterData:!0}),function(){Ki.data=$i=!$i}):na&&na.resolve?(Qi=na.resolve(void 0),Xi=Qi.then,function(){Xi.call(Qi,Wi)}):function(){Zi.call(m,Wi)});function aa(t){try{return{error:!1,value:t()}}catch(t){return{error:!0,value:t}}}function ua(t){var e;return!(!y(t)||"function"!=typeof(e=t.then))&&e}function ca(f,d,h){if(!d.notified){d.notified=!0;var p=d.reactions;ya(function(){for(var t=d.value,e=1==d.state,n=0;p.length>n;){var r,o,i,a=p[n++],u=e?a.ok:a.fail,c=a.resolve,s=a.reject,l=a.domain;try{u?(e||(2===d.rejection&&Na(f,d),d.rejection=1),!0===u?r=t:(l&&l.enter(),r=u(t),l&&(l.exit(),i=!0)),r===a.promise?s(xa("Promise-chain cycle")):(o=ua(r))?o.call(r,c,s):c(r)):s(t)}catch(t){l&&!i&&l.exit(),s(t)}}d.reactions=[],d.notified=!1,h&&!d.rejection&&Fa(f,d)})}}function sa(t,e,n){var r,o;Ra?((r=Pa.createEvent("Event")).promise=e,r.reason=n,r.initEvent(t,!1,!0),m.dispatchEvent(r)):r={promise:e,reason:n},(o=m["on"+t])?o(r):t===Ca&&function(t,e){var n=m.console;n&&n.error&&(1===arguments.length?n.error(t):n.error(t,e))}("Unhandled promise rejection",n)}function la(e,n,r,o){return function(t){e(n,r,t,o)}}function fa(t,e,n,r){e.done||(e.done=!0,r&&(e=r),e.value=n,e.state=2,ca(t,e,!0))}function da(n,r,t,e){if(!r.done){r.done=!0,e&&(r=e);try{if(n===t)throw xa("Promise can't be resolved itself");var o=ua(t);o?ya(function(){var e={done:!1};try{o.call(t,la(da,n,e,r),la(fa,n,e,r))}catch(t){fa(n,e,t,r)}}):(r.value=t,r.state=1,ca(n,r,!1))}catch(t){fa(n,{done:!1},t,r)}}}var ha,pa,va,ga,ya=ia||function(t){var e={fn:t,next:void 0};Bi&&(Bi.next=e),Gi||(Gi=e,Vi()),Bi=e},ma=Yi.set,ba=Ro("species"),wa="Promise",Ea=er.get,Sa=er.set,Oa=er.getterFor(wa),ja=wi,xa=m.TypeError,Pa=m.document,ka=m.process,Aa=m.fetch,Ta=ka&&ka.versions,_a=Ta&&Ta.v8||"",Ma=Ei.f,La=Ma,Ia="process"==u(ka),Ra=!!(Pa&&Pa.createEvent&&m.dispatchEvent),Ca="unhandledrejection",Ha=Q(wa,function(){function e(){}var t=ja.resolve(1),n=(t.constructor={})[ba]=function(t){t(e,e)};return!((Ia||"function"==typeof PromiseRejectionEvent)&&t.then(e)instanceof n&&0!==_a.indexOf("6.6")&&-1===ji.indexOf("Chrome/66"))}),Da=Ha||!_n(function(t){ja.all(t).catch(function(){})}),Fa=function(n,r){ma.call(m,function(){var t,e=r.value;if(qa(r)&&(t=aa(function(){Ia?ka.emit("unhandledRejection",e,n):sa(Ca,n,e)}),r.rejection=Ia||qa(r)?2:1,t.error))throw t.value})},qa=function(t){return 1!==t.rejection&&!t.parent},Na=function(t,e){ma.call(m,function(){Ia?ka.emit("rejectionHandled",t):sa("rejectionhandled",t,e.value)})};Ha&&(ja=function(t){mn(this,ja,wa),un(t),ha.call(this);var e=Ea(this);try{t(la(da,this,e),la(fa,this,e))}catch(t){fa(this,e,t)}},(ha=function(t){Sa(this,{type:wa,done:!1,notified:!1,parent:!1,reactions:[],rejection:!1,state:0,value:void 0})}).prototype=Ue(ja.prototype,{then:function(t,e){var n=Oa(this),r=Ma(No(this,ja));return r.ok="function"!=typeof t||t,r.fail="function"==typeof e&&e,r.domain=Ia?ka.domain:void 0,n.parent=!0,n.reactions.push(r),0!=n.state&&ca(this,n,!1),r.promise},catch:function(t){return this.then(void 0,t)}}),pa=function(){var t=new ha,e=Ea(t);this.promise=t,this.resolve=la(da,t,e),this.reject=la(fa,t,e)},Ei.f=Ma=function(t){return t===ja||t===va?new pa(t):La(t)},"function"==typeof wi&&(ga=wi.prototype.then,nr(wi.prototype,"then",function(t,e){var n=this;return new ja(function(t,e){ga.call(n,t,e)}).then(t,e)}),"function"==typeof Aa&&ti({global:!0,enumerable:!0,forced:!0},{fetch:function(t){return bi(ja,Aa.apply(m,arguments))}}))),ti({global:!0,wrap:!0,forced:Ha},{Promise:ja}),ge(ja,wa,!1),tr(wa),va=mt[wa],ti({target:wa,stat:!0,forced:Ha},{reject:function(t){var e=Ma(this);return e.reject.call(void 0,t),e.promise}}),ti({target:wa,stat:!0,forced:Ha},{resolve:function(t){return bi(this,t)}}),ti({target:wa,stat:!0,forced:Da},{all:function(t){var u=this,e=Ma(u),c=e.resolve,s=e.reject,n=aa(function(){var r=un(u.resolve),o=[],i=0,a=1;jn(t,function(t){var e=i++,n=!1;o.push(void 0),a++,r.call(u,t).then(function(t){n||(n=!0,o[e]=t,--a||c(o))},s)}),--a||c(o)});return n.error&&s(n.value),e.promise},race:function(t){var n=this,r=Ma(n),o=r.reject,e=aa(function(){var e=un(n.resolve);jn(t,function(t){e.call(n,t).then(r.resolve,o)})});return e.error&&o(e.value),r.promise}});var Ua=[].slice,za={},Wa=Function.bind||function(e){var n=un(this),r=Ua.call(arguments,1),o=function(){var t=r.concat(Ua.call(arguments));return this instanceof o?function(t,e,n){if(!(e in za)){for(var r=[],o=0;o<e;o++)r[o]="a["+o+"]";za[e]=Function("C,a","return new C("+r.join(",")+")")}return za[e](t,n)}(n,t.length,t):n.apply(e,t)};return y(n.prototype)&&(o.prototype=n.prototype),o};ti({target:"Function",proto:!0},{bind:Wa});var Ga=Object.assign,Ba=!Ga||g(function(){var t={},e={},n=Symbol(),r="abcdefghijklmnopqrst";return t[n]=7,r.split("").forEach(function(t){e[t]=t}),7!=Ga({},t)[n]||vt(Ga({},e)).join("")!=r})?function(t,e){for(var n=T(t),r=arguments.length,o=1,i=Dr.f,a=eo.f;o<r;)for(var u,c=$o(arguments[o++]),s=i?vt(c).concat(i(c)):vt(c),l=s.length,f=0;f<l;)u=s[f++],E&&!a.call(c,u)||(n[u]=c[u]);return n}:Ga;ti({target:"Object",stat:!0,forced:Object.assign!==Ba},{assign:Ba});if("undefined"!=typeof Element&&!Element.prototype.matches){var Va=Element.prototype;Va.matches=Va.matchesSelector||Va.mozMatchesSelector||Va.msMatchesSelector||Va.oMatchesSelector||Va.webkitMatchesSelector}var $a=function(t,e){for(;t&&9!==t.nodeType;){if("function"==typeof t.matches&&t.matches(e))return t;t=t.parentNode}};function Ka(t,e,n,r,o){var i=function(e,n,t,r){return function(t){t.delegateTarget=$a(t.target,n),t.delegateTarget&&r.call(e,t)}}.apply(this,arguments);return t.addEventListener(n,i,o),{destroy:function(){t.removeEventListener(n,i,o)}}}ti({target:"Object",stat:!0},{is:Qa});var Qa=Object.is||function(t,e){return t===e?0!==t||1/t==1/e:t!=t&&e!=e};Or("search",1,function(r,a,u){return[function(t){var e=A(this),n=null==t?void 0:t[r];return void 0!==n?n.call(t,e):new RegExp(t)[r](String(e))},function(t){var e=u(a,t,this);if(e.done)return e.value;var n=P(t),r=String(this),o=n.lastIndex;Qa(o,0)||(n.lastIndex=0);var i=xr(n,r);return Qa(n.lastIndex,o)||(n.lastIndex=o),null===i?-1:i.index}]});var Xa=o(function(t,e){Object.defineProperty(e,"__esModule",{value:!0});var n=function(t,e,n){return e&&r(t.prototype,e),n&&r(t,n),t};function r(t,e){for(var n=0;n<e.length;n++){var r=e[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(t,r.key,r)}}var o=e.Cache=(n(i,[{key:"cacheUrl",value:function(t){t.url in this.pages==0&&(this.pages[t.url]=t),this.last=this.pages[t.url],this.swup.log("Cache ("+Object.keys(this.pages).length+")",this.pages)}},{key:"getPage",value:function(t){return this.pages[t]}},{key:"getCurrentPage",value:function(){return this.getPage(window.location.pathname+window.location.search)}},{key:"exists",value:function(t){return t in this.pages}},{key:"empty",value:function(){this.pages={},this.last=null,this.swup.log("Cache cleared")}},{key:"remove",value:function(t){delete this.pages[t]}}]),i);function i(){!function(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}(this,i),this.pages={},this.last=null}e.default=o});e(Xa);Xa.Cache;var Ya=o(function(t,e){Object.defineProperty(e,"__esModule",{value:!0});e.default=function(t){var e=t.toString().toLowerCase().replace(/\s+/g,"-").replace(/\//g,"-").replace(/[^\w\-]+/g,"").replace(/\-\-+/g,"-").replace(/^-+/,"").replace(/-+$/,"");return"/"===e[0]&&(e=e.splice(1)),""===e&&(e="homepage"),e}});e(Ya);var Ja=o(function(t,e){Object.defineProperty(e,"__esModule",{value:!0});e.default=function(t){window.history.pushState({url:t||window.location.href.split(window.location.hostname)[1],random:Math.random(),source:"swup"},document.getElementsByTagName("title")[0].innerText,t||window.location.href.split(window.location.hostname)[1])}});e(Ja),$r("iterator");var Za=o(function(t,e){Object.defineProperty(e,"__esModule",{value:!0});e.query=function(t,e){var n=1<arguments.length&&void 0!==e?e:document;return"string"!=typeof t?t:n.querySelector(t)},e.queryAll=function(t,e){var n=1<arguments.length&&void 0!==e?e:document;return"string"!=typeof t?t:Array.prototype.slice.call(n.querySelectorAll(t))}});e(Za);Za.query,Za.queryAll;var tu=o(function(t,e){Object.defineProperty(e,"__esModule",{value:!0});var s="function"==typeof Symbol&&"symbol"===l(Symbol.iterator)?function(t){return l(t)}:function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":l(t)};e.default=function(t,r){var e=t.replace("<body",'<div id="swupBody"').replace("</body>","</div>"),o=document.createElement("div");o.innerHTML=e;for(var i=[],n=function(n){if(null==o.querySelector(r[n]))return{v:null};(0,Za.queryAll)(r[n]).forEach(function(t,e){(0,Za.queryAll)(r[n],o)[e].setAttribute("data-swup",i.length),i.push((0,Za.queryAll)(r[n],o)[e].outerHTML)})},a=0;a<r.length;a++){var u=n(a);if("object"===(void 0===u?"undefined":s(u)))return u.v}var c={title:o.querySelector("title").innerText,pageClass:o.querySelector("#swupBody").className,originalContent:t,blocks:i};return o.innerHTML="",o=null,c}});e(tu);var eu=o(function(t,e){Object.defineProperty(e,"__esModule",{value:!0});var a=Object.assign||function(t){for(var e=1;e<arguments.length;e++){var n=arguments[e];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(t[r]=n[r])}return t};e.default=function(t,e){var n=1<arguments.length&&void 0!==e&&e,r={url:window.location.pathname+window.location.search,method:"GET",data:null,headers:{}},o=a({},r,t),i=new XMLHttpRequest;return i.onreadystatechange=function(){4===i.readyState&&(i.status,n(i))},i.open(o.method,o.url,!0),Object.keys(o.headers).forEach(function(t){i.setRequestHeader(t,o.headers[t])}),i.send(o.data),i}});e(eu);var nu=o(function(t,e){Object.defineProperty(e,"__esModule",{value:!0});e.default=function(){var t=document.createElement("div"),e={WebkitTransition:"webkitTransitionEnd",MozTransition:"transitionend",OTransition:"oTransitionEnd otransitionend",transition:"transitionend"};for(var n in e)if(void 0!==t.style[n])return e[n];return!1}});e(nu);var ru=o(function(t,e){Object.defineProperty(e,"__esModule",{value:!0});e.default=function(){return window.location.pathname+window.location.search}});e(ru);var ou=o(function(t,e){Object.defineProperty(e,"__esModule",{value:!0});e.default=function(r,o){for(var i=0,t=function(n){null==r.querySelector(o[n])?console.warn("Element "+o[n]+" is not in current page."):(0,Za.queryAll)(o[n]).forEach(function(t,e){(0,Za.queryAll)(o[n],r)[e].setAttribute("data-swup",i),i++})},e=0;e<o.length;e++)t(e)}});e(ou);var iu,au=/"/g;ti({target:"String",proto:!0,forced:(iu="link",g(function(){var t=""[iu]('"');return t!==t.toLowerCase()||3<t.split('"').length}))},{link:function(t){return function(t,e,n,r){var o=String(A(t)),i="<"+e;return""!==n&&(i+=" "+n+'="'+String(r).replace(au,"&quot;")+'"'),i+">"+o+"</"+e+">"}(this,"a","href",t)}});var uu=o(function(t,e){function r(t,e){for(var n=0;n<e.length;n++){var r=e[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(t,r.key,r)}}Object.defineProperty(e,"__esModule",{value:!0});var n=(function(t,e,n){return e&&r(t.prototype,e),n&&r(t,n),t}(o,[{key:"getPath",value:function(){var t=this.link.pathname;return"/"!==t[0]&&(t="/"+t),t}},{key:"getAddress",value:function(){var t=this.link.pathname+this.link.search;return this.link.getAttribute("xlink:href")&&(t=this.link.getAttribute("xlink:href")),"/"!==t[0]&&(t="/"+t),t}},{key:"getHash",value:function(){return this.link.hash}}]),o);function o(t){!function(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}(this,o),t instanceof Element||t instanceof SVGElement?this.link=t:(this.link=document.createElement("a"),this.link.href=t)}e.default=n});e(uu);var cu=o(function(t,e){Object.defineProperty(e,"__esModule",{value:!0}),e.Link=e.markSwupElements=e.getCurrentUrl=e.transitionEnd=e.fetch=e.getDataFromHtml=e.createHistoryRecord=e.classify=void 0;var n=l(Ya),r=l(Ja),o=l(tu),i=l(eu),a=l(nu),u=l(ru),c=l(ou),s=l(uu);function l(t){return t&&t.__esModule?t:{default:t}}e.classify=n.default,e.createHistoryRecord=r.default,e.getDataFromHtml=o.default,e.fetch=i.default,e.transitionEnd=a.default,e.getCurrentUrl=u.default,e.markSwupElements=c.default,e.Link=s.default});e(cu);cu.Link,cu.markSwupElements,cu.getCurrentUrl,cu.transitionEnd,cu.fetch,cu.getDataFromHtml,cu.createHistoryRecord,cu.classify;var su=o(function(t,e){Object.defineProperty(e,"__esModule",{value:!0});var a=Object.assign||function(t){for(var e=1;e<arguments.length;e++){var n=arguments[e];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(t[r]=n[r])}return t};e.default=function(o,e){var i=this,n=[],t=void 0;this.triggerEvent("transitionStart",e),null!=o.customTransition?(this.updateTransition(window.location.pathname,o.url,o.customTransition),document.documentElement.classList.add("to-"+(0,cu.classify)(o.customTransition))):this.updateTransition(window.location.pathname,o.url),!e||this.options.animateHistoryBrowsing?function(){if(i.triggerEvent("animationOutStart"),document.documentElement.classList.add("is-changing"),document.documentElement.classList.add("is-leaving"),document.documentElement.classList.add("is-animating"),e&&document.documentElement.classList.add("is-popstate"),document.documentElement.classList.add("to-"+(0,cu.classify)(o.url)),n=i.getAnimationPromises("out"),Promise.all(n).then(function(){i.triggerEvent("animationOutDone")}),!e){var t=void 0;t=null!=i.scrollToElement?o.url+i.scrollToElement:o.url,(0,cu.createHistoryRecord)(t)}}():this.triggerEvent("animationSkipped"),this.cache.exists(o.url)?(t=new Promise(function(t){t()}),this.triggerEvent("pageRetrievedFromCache")):t=this.preloadPromise&&this.preloadPromise.route==o.url?this.preloadPromise:new Promise(function(n,r){(0,cu.fetch)(a({},o,{headers:i.options.requestHeaders}),function(t){if(500===t.status)return i.triggerEvent("serverError"),void r(o.url);var e=i.getPageData(t);null!=e?(e.url=o.url,i.cache.cacheUrl(e),i.triggerEvent("pageLoaded"),n()):r(o.url)})}),Promise.all(n.concat([t])).then(function(){i.renderPage(i.cache.getPage(o.url),e),i.preloadPromise=null}).catch(function(t){i.options.skipPopStateHandling=function(){return window.location=t,!0},window.history.go(-1)})}});e(su);var lu=o(function(t,e){Object.defineProperty(e,"__esModule",{value:!0});var a=Object.assign||function(t){for(var e=1;e<arguments.length;e++){var n=arguments[e];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(t[r]=n[r])}return t};e.default=function(t,e){var n=this;document.documentElement.classList.remove("is-leaving");var r=new cu.Link(t.responseURL);window.location.pathname!==r.getPath()&&(window.history.replaceState({url:r.getPath(),random:Math.random(),source:"swup"},document.title,r.getPath()),this.cache.cacheUrl(a({},t,{url:r.getPath()}))),e&&!this.options.animateHistoryBrowsing||document.documentElement.classList.add("is-rendering"),this.triggerEvent("willReplaceContent",e);for(var o=0;o<t.blocks.length;o++)document.body.querySelector('[data-swup="'+o+'"]').outerHTML=t.blocks[o];document.title=t.title,this.triggerEvent("contentReplaced",e),this.triggerEvent("pageView",e),this.options.cache||this.cache.empty(),setTimeout(function(){e&&!n.options.animateHistoryBrowsing||(n.triggerEvent("animationInStart"),document.documentElement.classList.remove("is-animating"))},10);var i=this.getAnimationPromises("in");!e||this.options.animateHistoryBrowsing?Promise.all(i).then(function(){n.triggerEvent("animationInDone"),n.triggerEvent("transitionEnd",e),document.documentElement.className.split(" ").forEach(function(t){!new RegExp("^to-").test(t)&&"is-changing"!==t&&"is-rendering"!==t&&"is-popstate"!==t||document.documentElement.classList.remove(t)})}):this.triggerEvent("transitionEnd",e),this.scrollToElement=null}});e(lu);var fu=o(function(t,e){Object.defineProperty(e,"__esModule",{value:!0});e.default=function(t,e){this._handlers[t].forEach(function(t){try{t(e)}catch(t){console.error(t)}});var n=new CustomEvent("swup:"+t,{detail:t});document.dispatchEvent(n)}});e(fu);var du=o(function(t,e){Object.defineProperty(e,"__esModule",{value:!0});e.default=function(t,e){this._handlers[t]?this._handlers[t].push(e):console.warn("Unsupported event "+t+".")}});e(du);var hu=o(function(t,e){Object.defineProperty(e,"__esModule",{value:!0});e.default=function(t,e){var n=this;if(null!=t)if(null!=e)if(this._handlers[t]&&this._handlers[t].filter(function(t){return t===e}).length){var r=this._handlers[t].filter(function(t){return t===e})[0],o=this._handlers[t].indexOf(r);-1<o&&this._handlers[t].splice(o,1)}else console.warn("Handler for event '"+t+"' no found.");else this._handlers[t]=[];else Object.keys(this._handlers).forEach(function(t){n._handlers[t]=[]})}});e(hu);var pu=o(function(t,e){Object.defineProperty(e,"__esModule",{value:!0});e.default=function(t,e,n){this.transition={from:t,to:e,custom:n}}});e(pu);var vu=o(function(t,e){Object.defineProperty(e,"__esModule",{value:!0});e.default=function(){var e=[];return(0,Za.queryAll)(this.options.animationSelector).forEach(function(n){var t=new Promise(function(e){n.addEventListener((0,cu.transitionEnd)(),function(t){n==t.target&&e()})});e.push(t)}),e}});e(vu);var gu=o(function(t,e){Object.defineProperty(e,"__esModule",{value:!0});e.default=function(t){var e=t.responseText,n=(0,cu.getDataFromHtml)(e,this.options.containers);return n?(n.responseURL=t.responseURL?t.responseURL:window.location.href,n):(console.warn("Received page is invalid."),null)}});e(gu);var yu=o(function(t,e){Object.defineProperty(e,"__esModule",{value:!0});e.use=function(t){if(t.isSwupPlugin)return this.plugins.push(t),t.swup=this,"function"==typeof t._beforeMount&&t._beforeMount(),t.mount(),this.plugins;console.warn("Not swup plugin instance "+t+".")},e.unuse=function(e){var t=void 0;if(t="string"==typeof e?this.plugins.find(function(t){return e===t.name}):e){t.unmount(),"function"==typeof t._afterUnmount&&t._afterUnmount();var n=this.plugins.indexOf(t);return this.plugins.splice(n,1),this.plugins}console.warn("No such plugin.")},e.findPlugin=function(e){return this.plugins.find(function(t){return e===t.name})}});e(yu);yu.use,yu.unuse,yu.findPlugin;var mu=e(o(function(t,e){Object.defineProperty(e,"__esModule",{value:!0});var r=Object.assign||function(t){for(var e=1;e<arguments.length;e++){var n=arguments[e];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(t[r]=n[r])}return t},n=function(t,e,n){return e&&o(t.prototype,e),n&&o(t,n),t};function o(t,e){for(var n=0;n<e.length;n++){var r=e[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(t,r.key,r)}}var i=v(Ka),a=v(Xa),u=v(su),c=v(lu),s=v(fu),l=v(du),f=v(hu),d=v(pu),h=v(vu),p=v(gu);function v(t){return t&&t.__esModule?t:{default:t}}var g=(n(y,[{key:"enable",value:function(){var e=this;if("undefined"!=typeof Promise){this.delegatedListeners.click=(0,i.default)(document,this.options.linkSelector,"click",this.linkClickHandler.bind(this)),window.addEventListener("popstate",this.popStateHandler.bind(this));var t=(0,cu.getDataFromHtml)(document.documentElement.outerHTML,this.options.containers);t.url=t.responseURL=(0,cu.getCurrentUrl)(),this.options.cache&&this.cache.cacheUrl(t),(0,cu.markSwupElements)(document.documentElement,this.options.containers),this.options.plugins.forEach(function(t){e.use(t)}),window.history.replaceState(Object.assign({},window.history.state,{url:window.location.href,random:Math.random(),source:"swup"}),document.title,window.location.href),this.triggerEvent("enabled"),document.documentElement.classList.add("swup-enabled"),this.triggerEvent("pageView")}else console.warn("Promise is not supported")}},{key:"destroy",value:function(){var e=this;this.delegatedListeners.click.destroy(),this.delegatedListeners.mouseover.destroy(),window.removeEventListener("popstate",this.popStateHandler.bind(this)),this.cache.empty(),this.options.plugins.forEach(function(t){e.unuse(t)}),(0,Za.queryAll)("[data-swup]").forEach(function(t){t.removeAttribute("data-swup")}),this.off(),this.triggerEvent("disabled"),document.documentElement.classList.remove("swup-enabled")}},{key:"linkClickHandler",value:function(t){if(t.metaKey||t.ctrlKey||t.shiftKey||t.altKey)this.triggerEvent("openPageInNewTab",t);else if(0===t.button){this.triggerEvent("clickLink",t),t.preventDefault();var e=new cu.Link(t.delegateTarget);if(e.getAddress()==(0,cu.getCurrentUrl)()||""==e.getAddress())""!=e.getHash()?(this.triggerEvent("samePageWithHash",t),null!=document.querySelector(e.getHash())?history.replaceState({url:e.getAddress()+e.getHash(),random:Math.random(),source:"swup"},document.title,e.getAddress()+e.getHash()):console.warn("Element for offset not found ("+e.getHash()+")")):this.triggerEvent("samePage",t);else{""!=e.getHash()&&(this.scrollToElement=e.getHash());var n=t.delegateTarget.getAttribute("data-swup-transition");this.loadPage({url:e.getAddress(),customTransition:n},!1)}}}},{key:"popStateHandler",value:function(t){if(!this.options.skipPopStateHandling(t)){var e=new cu.Link(t.state?t.state.url:window.location.pathname);""!==e.getHash()?this.scrollToElement=e.getHash():t.preventDefault(),this.triggerEvent("popState",t),this.loadPage({url:e.getAddress()},t)}}}]),y);function y(t){!function(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}(this,y);var e={animateHistoryBrowsing:!1,animationSelector:'[class*="transition-"]',linkSelector:'a[href^="'+window.location.origin+'"]:not([data-no-swup]), a[href^="/"]:not([data-no-swup]), a[href^="#"]:not([data-no-swup])',cache:!0,containers:["#swup"],requestHeaders:{"X-Requested-With":"swup",Accept:"text/html, application/xhtml+xml"},plugins:[],skipPopStateHandling:function(t){return!(t.state&&"swup"===t.state.source)}},n=r({},e,t);this._handlers={animationInDone:[],animationInStart:[],animationOutDone:[],animationOutStart:[],animationSkipped:[],clickLink:[],contentReplaced:[],disabled:[],enabled:[],openPageInNewTab:[],pageLoaded:[],pageRetrievedFromCache:[],pageView:[],popState:[],samePage:[],samePageWithHash:[],serverError:[],transitionStart:[],transitionEnd:[],willReplaceContent:[]},this.scrollToElement=null,this.preloadPromise=null,this.options=n,this.plugins=[],this.transition={},this.delegatedListeners={},this.cache=new a.default,(this.cache.swup=this).loadPage=u.default,this.renderPage=c.default,this.triggerEvent=s.default,this.on=l.default,this.off=f.default,this.updateTransition=d.default,this.getAnimationPromises=h.default,this.getPageData=p.default,this.log=function(){},this.use=yu.use,this.unuse=yu.unuse,this.findPlugin=yu.findPlugin,this.enable()}e.default=g})),bu=g(function(){function t(){}return!(Array.of.call(t)instanceof t)});ti({target:"Array",stat:!0,forced:bu},{of:function(){for(var t=0,e=arguments.length,n=new("function"==typeof this?this:Array)(e);t<e;)k(n,t,arguments[t++]);return n.length=e,n}});function wu(u){return function(t){for(var e,n=Ko(t),r=vt(n),o=r.length,i=0,a=[];i<o;)e=r[i++],E&&!Eu.call(n,e)||a.push(u?[e,n[e]]:n[e]);return a}}var Eu=eo.f,Su={entries:wu(!0),values:wu(!1)}.values;ti({target:"Object",stat:!0},{values:function(t){return Su(t)}});function Ou(t,e){return l(t)==e}function ju(t,e){return t instanceof e}function xu(e){return function(t){return Ou(t,e)}}var Pu=Object.assign,ku=Array.isArray;Pu(Ou,{el:function(t){return ju(t,Element)||ju(t,Document)},arrlike:function(t){var e=Ou(t.length,"number")&&t.length;return 0==e||0<e&&e-1 in t},class:function(t){return t&&t._method&&t._class},not:function(t){for(var e=arguments.length,n=new Array(1<e?e-1:0),r=1;r<e;r++)n[r-1]=arguments[r];return!Ou[t].apply(Ou,n)},doc:function(t){return ju(t,Document)},def:function(t){return!Ou(t,"undefined")},undef:xu("undefined"),bool:xu("boolean"),fn:xu("function"),obj:xu("object"),num:xu("number"),str:xu("string"),nul:xu("null"),inst:ju,arr:ku,_type:xu}),new(function(){function e(t){!function(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}(this,e),this.el=t instanceof e?t.el:n(document.querySelectorAll(t))}return function(t,e,n){e&&r(t.prototype,e),n&&r(t,n)}(e,[{key:"each",value:function(t){var e=0<arguments.length&&void 0!==t?t:function(){};return this.el.forEach(e.bind(this),this),this}},{key:"set",value:function(e,n){var r=this;return this.each(function(t){switch(l(n)){case"object":"object"!=l(t[e])&&(r.el[e]={}),Pu(t[e],n);break;case"undefined":t=e;break;default:t[e]=n}})}}]),e}())("body").set("style",{}),fetch("/assets/app.js").then(console.log),console.log({message:"Hello"}),new mu({requestHeaders:{"X-Requested-With":"swup","x-partial":"swup"}})});
//# sourceMappingURL=data:application/json;charset=utf8;base64,
