{"version":3,"sources":["app.js"],"names":["require","_global","_interopRequireDefault","obj","__esModule","default","_babelPolyfill","console","warn","assign","Object","El","el","_classCallCheck","this","_toConsumableArray","document","querySelectorAll","fn","arguments","length","undefined","forEach","bind","prop","val","_this","_typeof","ele","set","fetch","then","log","message"],"mappings":"qlCAAAA,QAAQ,gBAER,IAAIC,QAAUC,uBAAuBF,QAAQ,8BAE7C,SAASE,uBAAuBC,GAAO,OAAOA,GAAOA,EAAIC,WAAaD,EAAM,CAAEE,QAASF,GAEnFF,QAAO,QAASK,gBAAqC,oBAAZC,SAA2BA,QAAQC,MAC9ED,QAAQC,KAAK,+SAGfP,QAAO,QAASK,gBAAiB,MAEzBG,OAAWC,OAAXD,OACFE,cACF,SAAAA,EAAYC,GAAIC,gBAAAC,KAAAH,GACZG,KAAKF,GAAMA,aAAcD,EAAMC,EAAGA,GAAxBG,mBAAiCC,SAASC,iBAAiBL,wDAf7E,IAAQM,EAAR,EAAAC,UAAAC,aAAAC,IAAAF,UAAA,GAAAA,UAAA,GAAQ,aAEJlB,OAiBIa,KAAKF,GAAGU,QAAQJ,EAAGK,KAAKT,MAAOA,MAjBzBZ,iCAEyBsB,EAAUC,GAAO,IAAAC,EAAAZ,KAAsB,OAASX,KAAAA,KAAAA,SAAAA,GAAhD,OAAAwB,QAAAF,IAAwD,IAAA,SAuBpD,UAAnBE,QAAOf,EAAGY,MAAmBE,EAAKd,GAAGY,GAAQ,IArB1Df,OAASH,EAAAA,GAAhBmB,GACW,MACd,IAAA,YAuBmBb,EAAKY,EArBTlB,MAEGI,QAsBCE,EAAGY,GAAQC,cAM3BG,IAAM,IAAIjB,GAAG,QAzBTiB,IAAAC,IAAA,QAAa,IAChBC,MAAA,wBA2BAC,KAAKxB,QAAQyB,KAElBzB,QAAQyB,IAAI,CACRC,QAAS","file":"app.min.js","sourcesContent":["require(\"./noConflict\");\n\nvar _global = _interopRequireDefault(require(\"core-js/library/fn/global\"));\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nif (_global.default._babelPolyfill && typeof console !== \"undefined\" && console.warn) {\n  console.warn(\"@babel/polyfill is loaded more than once on this page. This is probably not desirable/intended \" + \"and may have consequences if different versions of the polyfills are applied sequentially. \" + \"If you do need to load the polyfill more than once, use @babel/polyfill/noConflict \" + \"instead to bypass the warning.\");\n}\n\n_global.default._babelPolyfill = true;\n\nconst { assign } = Object;\nclass El {\n    constructor(el) {\n        this.el = (el instanceof El) ? el.el : [...document.querySelectorAll(el)];\n    }\n\n    each(fn = () => {}) {\n        this.el.forEach(fn.bind(this), this);\n        return this;\n    }\n\n    set(prop, val) {\n        return this.each(el => {\n            switch (typeof val) {\n                case 'object':\n                    if (typeof el[prop] != 'object') this.el[prop] = {};\n                    assign(el[prop], val);\n                    break;\n                case 'undefined':\n                    el = prop;\n                    break;\n                default:\n                    el[prop] = val;\n            }\n        });\n    }\n}\n\nlet ele = new El(\"body\");\nele.set(\"style\", { });\nfetch(\"/assets/raw/barba.js\")\n    .then(console.log);\n\nconsole.log({\n    message: \"Hello\"\n});\n"]}