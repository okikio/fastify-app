let{env:env}=process;"dev"in env||require("dotenv").config();let dev="dev"in env&&"true"==env.dev.toString();const gulp=require("gulp"),{src:src,task:task,series:series,parallel:parallel,dest:dest,watch:watch}=gulp,nodeResolve=require("rollup-plugin-node-resolve"),builtins=require("rollup-plugin-node-builtins"),{init:init,write:write}=require("gulp-sourcemaps"),commonJS=require("rollup-plugin-commonjs"),rollupBabel=require("rollup-plugin-babel"),{stringify:stringify}=require("./util/stringify"),{babelConfig:babelConfig}=require("./browserlist"),rollupJSON=require("rollup-plugin-json"),uglify=require("gulp-uglify-es").default,inlineSrc=require("gulp-inline-source"),replace=require("gulp-string-replace"),{html:html,js:js}=require("gulp-beautify"),rollup=require("gulp-better-rollup"),{spawn:spawn}=require("child_process"),uglifyES5=require("gulp-uglify"),htmlmin=require("gulp-htmlmin"),assets=require("cloudinary").v2,postcss=require("gulp-postcss"),rename=require("gulp-rename"),newer=require("gulp-newer"),{writeFile:writeFile}=require("fs"),config=require("./config"),sass=require("gulp-sass"),pug=require("gulp-pug");let{pages:pages,cloud_name:cloud_name,imageURLConfig:imageURLConfig}=config,staticSite="staticSite"in env&&"true"==env.staticSite,assetURL=`https://res.cloudinary.com/${cloud_name}/`;assets.config({cloud_name:cloud_name,secure:!0});let srcMapsWrite=".",htmlMinOpts={minifyJS:!0,minifyCSS:!0,removeComments:!0,collapseWhitespace:!0,removeEmptyAttributes:!1,removeRedundantAttributes:!1,processScripts:["application/ld+json"]},minSuffix={suffix:".min"},watchDelay={delay:500},publicDest="public",stream=(e,s={},i)=>{let r=src(e,s.opts),l=s.pipes||[],t=s.dest||publicDest;return new Promise((e,s)=>{l.forEach(e=>{null!=e&&null!=e&&(r=r.pipe(e).on("error",s))}),r=r.pipe(dest(t)).on("end","function"==typeof i?i:e)})},streamList=(...e)=>Promise.all((Array.isArray(e[0])?e[0]:e).map(e=>Array.isArray(e)?stream(...e):e)),_exec=e=>{var s=e.toString().split(/\s+/g);return new Promise((e=(()=>{}))=>{spawn(s[0],s.slice(1),{shell:!0,stdio:"inherit"}).on("data",e=>process.stdout.write(e)).on("error",e=>console.error(e)).on("close",()=>(e||function(){})())})},_execSeries=(...e)=>Promise.all(e.map(e=>"string"==typeof e?_exec(e):e));task("html",()=>{let e=Object.keys(pages),s=Object.values(pages);return streamList(s.map((s,i)=>["views/app.pug",{pipes:[rename({basename:e[i],extname:".html"}),pug({locals:{...s,cloud_name:cloud_name}}),dev?html({indent_size:4}):htmlmin(htmlMinOpts),replace(/\/assets\/[^\s"']+/g,e=>{let s=new URL(`${assetURL+e}`.replace("/assets/","")),i=s.searchParams,r=s.search,l=i.get("h"),t=i.get("w")||"auto",n={...imageURLConfig,width:t,height:l};return staticSite?(/\/raw\/[^\s"']+/.test(e)?`${assetURL+e.replace(r,"")}`:assets.url(e.replace(r,""),n)).replace("/assets/",""):e})]}]))}),task("css",()=>stream("src/scss/*.scss",{pipes:[init(),sass({outputStyle:dev?"expanded":"compressed"}).on("error",sass.logError),postcss(),rename(minSuffix),write(srcMapsWrite)],dest:`${publicDest}/css`})),task("js",()=>streamList([...["modern"].concat(dev?[]:"general").map(e=>{let s="general"==e,i="general"==e?"":".modern";return["src/js/app.js",{opts:{allowEmpty:!0},pipes:[newer(`${publicDest}/js/app${s?"":".modern"}.min.js`),init(),rollup({plugins:[builtins(),commonJS(),nodeResolve(),rollupJSON(),rollupBabel(babelConfig[e])]},"general"==e?"umd":"es"),dev?js():s?uglifyES5():uglify(),rename(`app${i}.min.js`),write(srcMapsWrite)],dest:`${publicDest}/js`}]}),["src/js/app.vendor.js",{opts:{allowEmpty:!0},pipes:[newer(`${publicDest}/js/app.vendor.min.js`),init(),rollup({plugins:[builtins(),commonJS(),nodeResolve(),rollupJSON(),rollupBabel(babelConfig.node)]},"umd"),dev?js():uglify(),rename(minSuffix),write(srcMapsWrite)],dest:`${publicDest}/js`}]])),task("server",()=>streamList([["server.js",{opts:{allowEmpty:!0},pipes:[dev?newer("./server.min.js"):void 0,rollup({plugins:[commonJS(),rollupJSON(),rollupBabel(babelConfig.node)]},"es"),uglify(),rename(minSuffix)],dest:"."}]])),task("config",()=>streamList(new Promise((e,s)=>{writeFile("./config.min.js",`module.exports = ${stringify(config)};`,i=>{if(i)throw s(),i;e()})}),["config.min.js",{opts:{allowEmpty:!0},pipes:[newer("./config.min.js"),uglify()],dest:"."}],["config.min.js",{opts:{allowEmpty:!0},pipes:[newer("./config-dev.js"),js({indent_size:4}),rename({basename:"config-dev",extname:".js"})],dest:"."}])),task("config:watch",()=>_exec("gulp config server html --gulpfile ./gulpfile.min.js")),task("update",()=>stream("gulpfile.js",{opts:{allowEmpty:!0},pipes:[rollup({plugins:[rollupJSON(),rollupBabel(babelConfig.node)]},"es"),uglify(),rename(minSuffix)],dest:"."})),task("gulpfile:watch",()=>_execSeries("gulp update","gulp")),task("git",()=>_execSeries("git add .","git commit -m 'Upgrade'","git push -u origin master")),task("inline",()=>stream("public/*.html",{pipes:[inlineSrc({compress:!1})]})),task("default",series("update","config",parallel("server","html","js"),"css","inline")),task("other",series("update","config",parallel("server","html"),"css","inline")),task("watch",()=>{watch(["config.js","containers/*.js"],watchDelay,series("config:watch")),watch(["gulpfile.js","postcss.config.js","util/*.js","!util/*.min.js"],watchDelay,series("util","gulpfile:watch","server")),watch(["server.js","plugin.js"],watchDelay,series("server")),watch("views/**/*.pug",watchDelay,series("html","server","css","inline")),watch("src/**/*.scss",watchDelay,series("css","server","inline")),watch("src/**/*.js",watchDelay,series("js","server","inline"))});